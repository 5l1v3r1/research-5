<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<?xml-stylesheet type="text/xsl" href="whitepaper.xsl" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">
    <info>
        <title>SSL Server Rating Guide</title>
        <releaseinfo>version 2009c draft 1 (22 January 2013)</releaseinfo>
        <copyright>
            <year>2009-2013</year>
            <holder>Qualys, Inc.</holder>
        </copyright>
        <abstract>
            <para>The <firstterm>Secure Sockets Layer</firstterm> (SSL) protocol is a standard for
                encrypted network communication. We feel that there is surprisingly little attention
                paid to how SSL is configured, given its widespread usage. SSL is relatively easy to
                use, but it does have its traps. This guide aims to establish a straightforward
                assessment methodology, allowing administrators to assess SSL server configuration
                confidently without the need to become SSL experts.</para>
        </abstract>
    </info>
    <section>
        <title>Methodology Overview</title>
        <para>Our approach consists of three steps:</para>
        <orderedlist>
            <listitem>
                <para>We first look at the server certificate to verify that it is valid and
                    trusted. A server that fails this step is always assigned a zero score.</para>
            </listitem>
            <listitem>
                <para>We then inspect the configuration in four categories:</para>
                <orderedlist>
                    <listitem>
                        <para>Protocol support</para>
                    </listitem>
                    <listitem>
                        <para>Authentication strength</para>
                    </listitem>
                    <listitem>
                        <para>Cipher suite strength</para>
                    </listitem>
                    <listitem>
                        <para>Vulnerabilities and mitigations</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>The final score&#8212;a number between 0 and 100&#8212;is a combination of the
                    scores achieved in the individual categories. A zero score in any category
                    forces the total score to zero.</para>
            </listitem>
        </orderedlist>
        <para>Because small variations in configuration are not often terribly important, we also
            assign letter grades to servers. The letter grades are generally more useful&#8212;it is
            instantly clear that a server given an <literal>A</literal> is well configured. <xref
                linkend="table-grades"/> shows how a numerical score is translated into a letter
            grade. </para>
        <table xml:id="table-grades">
            <title>Letter grade translation</title>
            <tgroup cols="2">
                <colspec colname="c1" colnum="1"/>
                <colspec colname="c2" colnum="2"/>
                <thead>
                    <row>
                        <entry>Numerical Score</entry>
                        <entry>Grade</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>score >= 80</entry>
                        <entry>A</entry>
                    </row>
                    <row>
                        <entry>score >= 65</entry>
                        <entry>B</entry>
                    </row>
                    <row>
                        <entry>score >= 50</entry>
                        <entry>C</entry>
                    </row>
                    <row>
                        <entry>score >= 35</entry>
                        <entry>D</entry>
                    </row>
                    <row>
                        <entry>score >= 20</entry>
                        <entry>E</entry>
                    </row>
                    <row>
                        <entry>score &lt; 20</entry>
                        <entry>F</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>Our methodology is purposefully designed to be straightforward and practical. Advanced
            users may prefer to dig deep into the finer details of SSL (e.g., which ciphers are
            better than others), but we feel that such an approach, although intellectually
            challenging, would make this guide less useful in practice.</para>
        <section>
            <title>What This Guide Does Not Cover</title>
            <para>Our immediate goal is to focus on those configuration problems whose presence can
                be determined remotely and without manual assessment. This is the only way that we
                can provide a service that is quick and easy to use, as well as undertake
                Internet-scale assessments of SSL servers.</para>
            <para>The aspects we do not cover here fall into three groups. In the first group are
                aspects that are difficult to judge without knowing what a particular server is used
                for. In security there is rarely black and white, secure and insecure. Instead,
                there are many shades of gray. It is easy to understand that a banking web site
                needs better security than a personal homepage.</para>
            <para>In the second group are certain advanced aspects of SSL configuration. For
                example, <firstterm>HTTP Strict Transport Security</firstterm> (HSTS) and
                    <firstterm>forward secrecy</firstterm> fall into this group. When designing the
                original rating guide back in 2009, we felt that these advanced aspects were too
                demanding and didn&#x2019;t make much sense when the average server was very poorly
                configured. We don&#x2019;t wish to introduce advanced configuration aspects in a patch
                release (this document&#x2019;s version string is <emphasis>2009c</emphasis>), but we
                expect that the next major update will.</para>
            <para>In the third group are things that are potentially out of scope (of an SSL server
                configuration assessment) and are also difficult to automate. For example, an
                insecure web application running on an otherwise perfectly configured SSL server
                will no doubt be insecure. In time, we expect to extend our assessment technology to
                cover some of these problems. For example, detecting insecure session cookies or
                mixed page content is fully within the scope of this rating guide.</para>
        </section>
        <section>
            <title>What Should My Score Be?</title>
            <para>Our letter grades make this question easy to answer. If you get an A, you&#x2019;re doing
                well. If you get any other grade, look for problems to fix. Beyond that, it does not
                matter what exact score you get, and we certainly don&#x2019;t know what your score should
                be. No one can know without a deeper analysis. Because different servers have
                different requirements, it is not possible to choose any one configuration that
                everyone should have. Furthermore, chasing the top score may make your web site slow
                (e.g., if you use a 4096-bit private key) or inaccessible to some of your users
                (e.g., if you disable all protocols except TLS 1.2.) The bottom line is that your
                site needs to be secure <emphasis>and</emphasis> work well.</para>
        </section>
        <section>
            <title>Is SSL Enough?</title>
            <para>A non-trivial web site cannot be secure if it does not implement SSL, but SSL
                alone is not enough. SSL deals with only one aspect of security, and that is the
                security of the communication channel between a web site and its users. SSL does not
                and cannot address a number of possible security issues that may exist on a web
                site. View SSL as a foundation on which to build, but the foundation alone is not
                enough.</para>
        </section>
        <section>
            <title>Acknowledgements</title>
            <para>This first version of this guide was written by <link
                    xlink:href="http://blog.ivanristic.com">Ivan RistiÄ‡</link>, and subsequently
                reviewed by Christian Bockermann, Christian Folini, Robert Hansen, Ofer Shezaf and
                Colin Watson. Since that first release I discussed the topic of SSL security with
                many experts from the field. They may have not contributed to this guide directly,
                but they have certainly shaped it and continue to shape it with their thoughts,
                which they have generously shared with me.</para>
        </section>
    </section>
    <section>
        <title>Certificate Trust</title>
        <para>Server certificate is often the weakest point of an SSL server configuration. A
            certificate that is not trusted (i.e., is not ultimately signed by a well-known
            certificate authority) fails to prevent man-in-the-middle (MITM) attacks and renders SSL
            effectively useless. A certificate that is incorrect in some other way (e.g., a
            certificate that has expired) erodes trust and, in the long term, jeopardises the
            security of the Internet as a whole. </para>
        <para>For these reasons, any of the following certificate issues immediately result in a
            zero score:</para>
        <itemizedlist>
            <listitem>
                <para>Domain name mismatch</para>
            </listitem>
            <listitem>
                <para>Certificate not yet valid</para>
            </listitem>
            <listitem>
                <para>Certificate expired</para>
            </listitem>
            <listitem>
                <para>A self-signed certificate</para>
            </listitem>
            <listitem>
                <para>A certificate that was signed by a CA that is unknown to the general
                    public</para>
            </listitem>
            <listitem>
                <para>A revoked certificate</para>
            </listitem>
        </itemizedlist>
        <note>
            <para>The SSL Labs criteria is designed for public&#8211;facing web sites, and relies on
                Mozilla&#x2019;s trust store. In other words, if a site works in Firefox, it should work in
                the SSL Labs test. Some organisations use their own (private) CA certificates, a
                practice that is entirely legitimate, provided such CA certificates are distributed
                in a safe manner to all those who need them. However, because these private CA roots
                are not in Mozilla&#x2019;s store, we are not able to confirm the authenticity of any
                server certificates signed by them.</para>
        </note>
    </section>
    <section>
        <title>Scoring</title>
        <para>SSL is a complex hybrid protocol with support for many features across several phases
            of operation. To account for the complexity, we rate the configuration of an SSL server
            in four categories, as displayed in <xref linkend="table-criteria-categories"/>. We
            calculate the final score as a combination of the scores in the individual categories,
            as described in the &#x201c;Methodology Overview&#x201d; section.</para>
        <table xml:id="table-criteria-categories">
            <title>Criteria categories</title>
            <tgroup cols="2">
                <colspec colname="c1" colnum="1"/>
                <colspec colname="c2" colnum="2"/>
                <thead>
                    <row>
                        <entry>Category</entry>
                        <entry>Score</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Protocol support</entry>
                        <entry>30%</entry>
                    </row>
                    <row>
                        <entry>Authentication</entry>
                        <entry>40%</entry>
                    </row>
                    <row>
                        <entry>Cipher suite strength</entry>
                        <entry>30%</entry>
                    </row>
                    <row>
                        <entry>Vulnerabilities</entry>
                        <entry>N/A</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>The fourth category is reserved for vulnerabilities that might be present in server
            configuration. Because vulnerabilities vary in potential impact, this last category
            consists of a series of vulnerability-specific rules.</para>
        <para>The sections that follow explain the rating system for each of the categories.</para>
        <section>
            <title>Protocol Support</title>
            <para>First, we look at the protocols supported by an SSL server. For example, older
                protocols have known weaknesses, some of which are very serious. For a long time SSL
                2.0 was the only obviously insecure protocol, but we now know that SSL 3.0 and TLS
                1.0 have significant problems too. Because a server can (and often must) support
                several protocols, we use the following algorithm to arrive to the final
                score:</para>
            <orderedlist>
                <listitem>
                    <para>Start with the score of the best protocol.</para>
                </listitem>
                <listitem>
                    <para>Add the score of the worst protocol.</para>
                </listitem>
                <listitem>
                    <para>Divide by 2.</para>
                </listitem>
            </orderedlist>
            <table xml:id="table-protocol-support">
                <title>Protocol support scoring</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1"/>
                    <colspec colname="c2" colnum="2"/>
                    <thead>
                        <row>
                            <entry>Protocol</entry>
                            <entry>Score</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>SSL 2.0</entry>
                            <entry>Fail</entry>
                        </row>
                        <row>
                            <entry>SSL 3.0</entry>
                            <entry>60%</entry>
                        </row>
                        <row>
                            <entry>TLS 1.0</entry>
                            <entry>80%</entry>
                        </row>
                        <row>
                            <entry>TLS 1.1</entry>
                            <entry>90%</entry>
                        </row>
                        <row>
                            <entry>TLS 1.2</entry>
                            <entry>100%</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Authentication Strength</title>
            <para>In this category we examine the strength of the authentication mechanism, which
                hinges almost entirely on the strenght of the server&#x2019;s private certificate. In the
                man-in-the middle (MITM) attack scenario, a weak server private key is probably the
                weakest point. A sufficiently weak private key can be brute-forced, after which the
                MITM attacker can often observe all communication and also impersonate the server at
                will.</para>
            <table xml:id="table-key-exchange">
                <title>Authentication strength scoring</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1"/>
                    <colspec colname="c2" colnum="2"/>
                    <thead>
                        <row>
                            <entry>Key exchange aspect</entry>
                            <entry>Score</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Weak key (Debian OpenSSL flaw)</entry>
                            <entry>Fail</entry>
                        </row>
                        <row>
                            <entry>Anonymous key exchange (no authentication)</entry>
                            <entry>Fail</entry>
                        </row>
                        <row>
                            <entry>Key strength &lt; 512 bits</entry>
                            <entry>Fail</entry>
                        </row>                        
                        <row>
                            <entry>Key strength &lt; 1024 bits (e.g., 512)</entry>
                            <entry>20%</entry>
                        </row>
                        <row>
                            <entry>Key strength &lt; 2048 bits (e.g., 1024)</entry>
                            <entry>60%</entry>
                        </row>
                        <row>
                            <entry>Key strength &lt; 4096 bits (e.g., 2048)</entry>
                            <entry>90%</entry>
                        </row>
                        <row>
                            <entry>Key strength >= 4096 bits</entry>
                            <entry>100%</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Cipher Suite Strength</title>
            <para>To break a single communication session, an attacker can attempt to break the
                cipher suite used. However, he can also attack the key exchange. If the key exchange
                is protected by the server&#x2019;s certificate, its strength equal to the strength of the
                server&#x2019;s private key. However, some cipher suites use a separate key exchange
                mechanism based on the Diffieâ€“Hellman algorithm. In this case, the strength of the
                key exchange depends on DH or ECDH parameters that are used. The strength of a
                particular cipher suite is equal to the lower of the two values (key exchange
                strength and cipher suite strength).</para>
            <para>Because servers typically support many cipher suites, we examine and rate all
                available suites individually, and then generate the overall score to describe the
                strength of suites supported by the server. We use the following simple algorithm: </para>
            <orderedlist>
                <listitem>
                    <para>Start with the score of the strongest cipher.</para>
                </listitem>
                <listitem>
                    <para>Add the score of the weakest cipher.</para>
                </listitem>
                <listitem>
                    <para>Divide by 2.</para>
                </listitem>
            </orderedlist>
            <table xml:id="table-cipher-strength">
                <title>Cipher suite strength scoring</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1"/>
                    <colspec colname="c2" colnum="2"/>
                    <thead>
                        <row>
                            <entry>Cipher strength</entry>
                            <entry>Score</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>0 bits (no encryption)</entry>
                            <entry>Fail</entry>
                        </row>
                        <row>
                            <entry>&lt; 128 bits (e.g., 40, 56)</entry>
                            <entry>20%</entry>
                        </row>
                        <row>
                            <entry>&lt; 256 bits (e.g., 128, 168)</entry>
                            <entry>80%</entry>
                        </row>
                        <row>
                            <entry>>= 256 bits (e.g., 256)</entry>
                            <entry>100%</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Vulnerabilities</title>
            <para>The <emphasis>Vulnerabilities</emphasis> category was added to address various
                protocol-level issues that were uncovered since the first edition of this guide.
                This category is different from all other ones, because the vulnerabilities are all
                different. For server-side vulnerabilities, the treatment is clear. An unpatched
                server that supports insecure renegotiation is a clear failure.</para>
            <para>Deciding what to do about BEAST and CRIME is not as easy, because both are
                client-side issues that can be mitigated in server configuration. The decision is
                made more difficult by the fact that most modern (up-to-date) browsers have already
                mitigated both problems. Looking at the statistics of browser usage, and at which
                browser vendors fail to address these issues, we reached the conclustion that the
                threat is real, but applies to a relatively small number of users who are using
                non-patched browsers.</para>
            <para>Servers that have not mitigated these two problems will have their grades capped
                to B or C, depending on the seriousness of the problem.</para> <table xml:id="table-vulnerabilities">
                <title>Vulnerabilities</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1"/>
                    <colspec colname="c2" colnum="2"/>
                    <thead>
                        <row>
                            <entry>Issue</entry>
                            <entry>Impact</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Insecure renegotiation</entry>
                            <entry>Fail</entry>
                        </row>
                        <row>
                            <entry>No BEAST mitigation</entry>
                            <entry>Grade capped to C</entry>
                        </row>
                        <row>
                            <entry>No CRIME mitigation</entry>
                            <entry>Grade capped to B</entry>
                        </row>                        
                    </tbody>
                </tgroup>
            </table>
        </section>
    </section>
    <section>
        <title>SSL Configuration Advice</title>
        <para>The first version of this guide had some useful configuration advice, but there is a
            better choice today; we recommend that you to read our <emphasis><link
                    xlink:href="https://www.ssllabs.com/projects/best-practices/">SSL/TLS Deployment
                    Best Practices</link></emphasis> guide, which offers a comprehensive treatment
            of this topic.</para>
    </section>
    <section>
        <title>For Consideration in Future Releases</title>
        <para>We have left a number of open issues for future consideration:</para>
        <variablelist>
            <varlistentry>
                <term>Perfect forward secrecy bonus points</term>
                <listitem>
                    <para>Some key exchange mechanisms allow for perfect forward secrecy. Perfect
                        forward secrecy is a property that ensures that short-term session keys
                        cannot be compromised after a compromise of a long-term secret key (which
                        was used in the generation of the short-term keys). We should consider
                        giving bonus points to those servers that allow only the key exchange
                        mechanisms that allow for forward secrecy.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Differences between encryption algorithms</term>
                <listitem>
                    <para>Should the choice of encryption algorithms affect server score? For
                        example, it is said that RC4 is not as strong as once thought, so its
                        availability might warrant negative points.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Extended Validation certificates</term>
                <listitem>
                    <para>High profile web sites might benefit from using EV certificates, which
                        provide a level of assurance of a site&#x2019;s real-life identity.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>HTTP Strict Transport Security</term>
                <listitem>
                    <para/>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section>
        <title>About SSL</title>
        <para>The Secure Sockets Layer (SSL) protocol is a standard for encrypted network
            communication. It was conceived at Netscape in 1994; version 2.0 was the first public
            release. SSL was later upgraded to 3.0, and, with further minor improvements,
            standardised under the name TLS (<firstterm>Transport Layer Security</firstterm>). TLS
            v1.2, the most recent version, is defined by <link
                xlink:href="http://www.ietf.org/rfc/rfc5246.txt">RFC 5246</link>.</para>
    </section>
    <section>
        <title>Changes</title>
        <para/>
        <section>
            <title>Version 2009b</title>
            <variablelist>
                <varlistentry>
                    <term>Do not allow weak encryption error messages</term>
                    <listitem>
                        <para>The first version of the rating guide did not explicitly discuss the
                            so-called <emphasis>weak encryption error messages</emphasis>.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Version 2009c</title>
            <para>This is a patch release that aims to keep the overall structure of the guide in
                place, but update the criteria to address the current SSL threat model.</para>
            <variablelist>
                <varlistentry>
                    <term>Do not allow SSL 2.0</term>
                    <listitem>
                        <para>SSL 2.0 is no longer considered acceptable. Its presence is an
                            immediate fail.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Adjust key size scores</term>
                    <listitem>
                        <para>A 1024-bit key is no longer considered as strong as it was several
                            years ago. In fact, these days it is getting increasingly difficult to
                            get a certificate for a key below 2048 bits.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Adjust protocol scores</term>
                    <listitem>
                        <para>Protocol scores have been adjusted to account for the new protocol
                            flaws discovered since 2009.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Renamed Cipher Strength category to Cipher Suite Strength</term>
                    <listitem>
                        <para>The new name better describes what is measured, because both the
                            strength of the key exchange and the strength of the user cipher are
                            taken into account for each cipher suite.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Renamed Key Exchange category to Authentication</term>
                    <listitem>
                        <para>The scoring remains the same, but the new name makes it more clear
                            what the category is about. The key exchange aspects relevant for cipher
                            suite security remain in the <emphasis>Cipher Suite Strength</emphasis>
                            category.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Handle protocol-level issues uncovered since the last rating guide</term>
                    <listitem>
                        <para>In the 3 years since the original guide was released, three different
                            protocol issues were uncovered. The fourth assessment category was added
                            to account for the presence of vulnerabilities and absence of relevant
                            mitigation techniques.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>
    <section>
        <title>About SSL Labs</title>
        <para><link xlink:href="https://www.ssllabs.com">SSL Labs</link> is a computer security
            research organisation that, unsurprisingly, focuses on the SSL standard. Our aim is to
            discuss the rarely mentioned aspects of SSL, promote its correct usage, and generally
            inspire everyone to do their part to promote security. Unlike in some other areas (e.g.,
            application security), security is relatively easy to achieve when it comes to SSL. Thus
            we believe that there are no excuses for a lack of security.</para>
    </section>
</article>
